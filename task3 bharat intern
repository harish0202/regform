
Creating a money tracker app involves building a user interface for managing expenses and income (HTML and CSS), a server-side application (Node.js) for handling requests and interactions with the database, and a database (MongoDB) for storing financial transactions. Below is a basic example to help you get started:

HTML (index.html):
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>Money Tracker</title>
</head>
<body>
  <header>
    <h1>Money Tracker</h1>
  </header>

  <div class="container">
    <section id="balance">
      <h2>Balance: $<span id="balanceAmount">0.00</span></h2>
    </section>

    <section id="transactions">
      <h2>Transactions</h2>
      <ul id="transactionList">
        <!-- Transaction items will be dynamically inserted here -->
      </ul>
    </section>

    <section id="new-transaction">
      <h2>Add New Transaction</h2>
      <form action="/transactions" method="POST">
        <label for="description">Description:</label>
        <input type="text" id="description" name="description" required>

        <label for="amount">Amount:</label>
        <input type="number" id="amount" name="amount" step="0.01" required>

        <label for="type">Type:</label>
        <select id="type" name="type" required>
          <option value="income">Income</option>
          <option value="expense">Expense</option>
        </select>

        <button type="submit">Add Transaction</button>
      </form>
    </section>
  </div>
</body>
</html>
CSS (styles.css):
css
Copy code
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

header {
  background-color: #333;
  color: #fff;
  text-align: center;
  padding: 20px;
}

.container {
  margin: 20px;
}

#balance {
  margin-bottom: 20px;
}

#transactions {
  margin-bottom: 20px;
}

ul {
  list-style: none;
  padding: 0;
}

li {
  background-color: #fff;
  padding: 10px;
  margin: 10px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

#new-transaction {
  margin-top: 20px;
}

form {
  display: flex;
  flex-direction: column;
}

label {
  margin-bottom: 8px;
}

input,
select {
  padding: 8px;
  margin-bottom: 16px;
}

button {
  background-color: #007bff;
  color: #fff;
  padding: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}
Node.js (app.js):
javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/moneyTrackerDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Create a transaction schema
const transactionSchema = new mongoose.Schema({
  description: String,
  amount: Number,
  type: String, // 'income' or 'expense'
  date: { type: Date, default: Date.now }
});

const Transaction = mongoose.model('Transaction', transactionSchema);

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

// Serve the money tracker homepage
app.get('/', async (req, res) => {
  // Fetch all transactions from the database
  const transactions = await Transaction.find();

  // Calculate the balance
  const balance = transactions.reduce((acc, transaction) => {
    return transaction.type === 'income' ? acc + transaction.amount : acc - transaction.amount;
  }, 0).toFixed(2);

  // Render the homepage with the retrieved transactions and balance
  res.render('index', { transactions, balance });
});

// Handle new transaction submission
app.post('/transactions', async (req, res) => {
  const newTransaction = new Transaction({
    description: req.body.description,
    amount: parseFloat(req.body.amount),
    type: req.body.type
  });

  // Save the new transaction to the database
  await newTransaction.save();

  // Redirect to the homepage after adding a transaction
  res.redirect('/');
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
Make sure to install the required packages using the following commands:

bash
Copy code
npm install express mongoose body-parser
Before running the application, ensure that MongoDB is running, and replace the connection string in mongoose.connect() with your MongoDB connection string.

Now, you can run your Node.js application using:

bash
Copy code
node app.js
Visit http://localhost:3000 in your web browser to access the money tracker app. You can add new transactions (income or expense), and the balance will be calculated and displayed on the homepage. Transactions will be stored in the MongoDB database.
