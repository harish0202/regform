Creating a blog website involves multiple components: the front-end (HTML and CSS) for the user interface, the back-end (Node.js) for handling requests, and a database (MongoDB) for storing and retrieving blog posts. Below is a basic example to help you get started:

HTML (index.html):
html
Copy code
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="styles.css">
  <title>Blog Website</title>
</head>
<body>
  <header>
    <h1>My Blog</h1>
  </header>

  <div class="container">
    <section id="posts">
      <!-- Blog posts will be dynamically inserted here -->
    </section>

    <section id="new-post">
      <h2>Create a New Post</h2>
      <form action="/posts" method="POST">
        <label for="title">Title:</label>
        <input type="text" id="title" name="title" required>

        <label for="content">Content:</label>
        <textarea id="content" name="content" required></textarea>

        <button type="submit">Publish Post</button>
      </form>
    </section>
  </div>
</body>
</html>
CSS (styles.css):
css
Copy code
body {
  font-family: Arial, sans-serif;
  background-color: #f4f4f4;
  margin: 0;
  padding: 0;
}

header {
  background-color: #333;
  color: #fff;
  text-align: center;
  padding: 20px;
}

.container {
  margin: 20px;
}

#posts {
  display: flex;
  flex-wrap: wrap;
}

.post {
  background-color: #fff;
  padding: 20px;
  margin: 10px;
  border-radius: 8px;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

#new-post {
  margin-top: 20px;
}

form {
  display: flex;
  flex-direction: column;
}

label {
  margin-bottom: 8px;
}

input,
textarea {
  padding: 8px;
  margin-bottom: 16px;
}

button {
  background-color: #007bff;
  color: #fff;
  padding: 10px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

button:hover {
  background-color: #0056b3;
}
Node.js (app.js):
javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/blogDB', { useNewUrlParser: true, useUnifiedTopology: true });

// Create a post schema
const postSchema = new mongoose.Schema({
  title: String,
  content: String
});

const Post = mongoose.model('Post', postSchema);

app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

// Serve the blog homepage
app.get('/', async (req, res) => {
  // Fetch all posts from the database
  const posts = await Post.find();

  // Render the homepage with the retrieved posts
  res.render('index', { posts });
});

// Handle new post submission
app.post('/posts', async (req, res) => {
  const newPost = new Post({
    title: req.body.title,
    content: req.body.content
  });

  // Save the new post to the database
  await newPost.save();

  // Redirect to the homepage after posting
  res.redirect('/');
});

app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
});
Make sure to install the required packages using the following commands:

bash
Copy code
npm install express mongoose body-parser
Before running the application, ensure that MongoDB is running, and replace the connection string in mongoose.connect() with your MongoDB connection string.

Now, you can run your Node.js application using:

bash
Copy code
node app.js
Visit http://localhost:3000 in your web browser to access the blog website. You can create new posts, and they will be stored in the MongoDB database.
